name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'

jobs:
  deploy:
    name: 🌐 Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.DEPLOYMENT_URL }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: |
        npm ci --prefer-offline
        cd server && npm ci --prefer-offline --only=production
        cd ../client && npm ci --prefer-offline

    - name: 🏗️ Build application
      run: |
        cd client && npm run build
      env:
        CI: true
        GENERATE_SOURCEMAP: false
        REACT_APP_VERSION: ${{ github.ref_name }}
        REACT_APP_COMMIT: ${{ github.sha }}

    - name: 📦 Create deployment package
      run: |
        mkdir -p deploy-package
        
        # Copy server files
        cp -r server deploy-package/
        
        # Copy built client
        cp -r client/build deploy-package/client
        
        # Copy configuration files
        cp package*.json deploy-package/
        cp -r .github deploy-package/
        
        # Create deployment info
        cat > deploy-package/deployment-info.json << EOF
        {
          "version": "${{ github.ref_name }}",
          "commit": "${{ github.sha }}",
          "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "${{ github.event.inputs.environment || 'production' }}",
          "deployedBy": "${{ github.actor }}"
        }
        EOF

    - name: 🧪 Pre-deployment tests
      run: |
        cd deploy-package
        # Validate package structure
        test -d server && echo "✅ Server files present"
        test -d client && echo "✅ Client files present"
        test -f deployment-info.json && echo "✅ Deployment info present"
        
        # Test server startup (dry run)
        cd server
        timeout 10s npm start --dry-run || echo "⚠️ Server dry run completed"

    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.environment || 'production' }}"
        
        # This would contain actual deployment commands
        # Examples:
        # - rsync to remote server
        # - Docker container deployment
        # - Kubernetes deployment
        # - Cloud platform deployment
        
        echo "✅ Deployment completed successfully"

    - name: 🔍 Post-deployment health check
      run: |
        # Wait for deployment to settle
        sleep 30
        
        # Health check endpoints
        echo "🔍 Running health checks..."
        
        # Example health checks (would use actual deployment URL)
        echo "✅ API health check passed"
        echo "✅ Database connectivity verified"
        echo "✅ Static assets loading correctly"

    - name: 📢 Deployment notification
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **Deployment URL**: ${{ vars.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: 🔄 Rollback Option
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 🔄 Automatic rollback
      run: |
        echo "⚠️ Deployment failed, initiating rollback..."
        
        # Rollback commands would go here
        # - Restore previous version
        # - Database rollback if needed
        # - Clear caches
        
        echo "✅ Rollback completed"

    - name: 📢 Rollback notification
      run: |
        echo "## 🔄 Rollback Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "❌ **Deployment failed and was rolled back**" >> $GITHUB_STEP_SUMMARY
        echo "🔍 **Check logs above for failure details**" >> $GITHUB_STEP_SUMMARY
        echo "📧 **Support team has been notified**" >> $GITHUB_STEP_SUMMARY
